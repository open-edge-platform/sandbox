export declare const mode: import("@spark-design/core").TokenData<{
    color: string;
    colorDisabled: string;
    colorPlaceholder: string;
    colorPlaceholderHover: string;
    colorInvalid: string;
    borderColor: string;
    borderColorHover: string;
    borderColorFocus: string;
    borderColorDisabled: string;
    borderColorActive: string;
    bgColorOutline: string;
    bgColorOutlineDisabled: string;
    transparentColor: string;
}>;
export declare const darkMode: import("@spark-design/core").TokenData<{
    color: string;
    colorDisabled: string;
    colorPlaceholder: string;
    colorPlaceholderHover: string;
    colorInvalid: string;
    borderColor: string;
    borderColorHover: string;
    borderColorFocus: string;
    borderColorDisabled: string;
    borderColorActive: string;
    bgColorOutline: string;
    bgColorOutlineDisabled: string;
    transparentColor: string;
} & {
    color: string;
    colorDisabled: string;
    colorPlaceholder: string;
    colorPlaceholderHover: string;
    colorInvalid: string;
    borderColor: string;
    borderColorHover: string;
    borderColorFocus: string;
    borderColorDisabled: string;
    borderColorActive: string;
    bgColorOutline: string;
    bgColorOutlineDisabled: string;
    transparentColor: string;
}>;
export declare const modes: {
    light: import("@spark-design/core").TokenData<{
        color: string;
        colorDisabled: string;
        colorPlaceholder: string;
        colorPlaceholderHover: string;
        colorInvalid: string;
        borderColor: string;
        borderColorHover: string;
        borderColorFocus: string;
        borderColorDisabled: string;
        borderColorActive: string;
        bgColorOutline: string;
        bgColorOutlineDisabled: string;
        transparentColor: string;
    }>;
    dark: import("@spark-design/core").TokenData<{
        color: string;
        colorDisabled: string;
        colorPlaceholder: string;
        colorPlaceholderHover: string;
        colorInvalid: string;
        borderColor: string;
        borderColorHover: string;
        borderColorFocus: string;
        borderColorDisabled: string;
        borderColorActive: string;
        bgColorOutline: string;
        bgColorOutlineDisabled: string;
        transparentColor: string;
    } & {
        color: string;
        colorDisabled: string;
        colorPlaceholder: string;
        colorPlaceholderHover: string;
        colorInvalid: string;
        borderColor: string;
        borderColorHover: string;
        borderColorFocus: string;
        borderColorDisabled: string;
        borderColorActive: string;
        bgColorOutline: string;
        bgColorOutlineDisabled: string;
        transparentColor: string;
    }>;
};
