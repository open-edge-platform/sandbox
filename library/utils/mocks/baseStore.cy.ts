/*
 * SPDX-FileCopyrightText: (C) 2023 Intel Corporation
 * SPDX-License-Identifier: Apache-2.0
 */
import { BaseStore } from "./baseStore";
import { StoreUtils } from "./storeUtils";

// when creating an object we only send the value to the API,
// the ID is autogenerated and returned
interface TestModelRequest {
  value: string;
}
interface TestModel extends TestModelRequest {
  myCustomIdField: string;
}

const models: TestModel[] = [
  { myCustomIdField: "id-1", value: "value-1" },
  { myCustomIdField: "id-2", value: "value-2" },
];

class TestStore extends BaseStore<
  "myCustomIdField",
  TestModel,
  TestModelRequest
> {
  constructor() {
    super("myCustomIdField", [...models]);
  }
  convert(body: TestModelRequest): TestModel {
    return {
      ...body,
      myCustomIdField: StoreUtils.randomString(),
    };
  }
}

describe("The BaseStore class", () => {
  let store: BaseStore<"myCustomIdField", TestModel, TestModelRequest>;

  beforeEach(() => {
    store = new TestStore();
  });
  it("should return all the resources in the store", () => {
    const res = store.list();
    expect(res.length).eq(models.length);
  });

  it("should get an element by ID", () => {
    const res = store.get("id-1");
    expect(res).not.eq(undefined);
    expect(res?.myCustomIdField).eq("id-1");
    expect(res?.value).eq("value-1");
  });

  it("should create an element", () => {
    const res = store.post({ value: "new-model" });
    expect(res?.myCustomIdField).not.eq(undefined);
    expect(store.list().length).to.eq(models.length + 1);
    expect(store.get(res ? res.myCustomIdField : "")).not.eq(undefined);
  });

  it("should update an element via PUT", () => {
    const res = store.put("id-1", { value: "updated-value" });
    expect(res?.value).eq("updated-value");
    expect(store.list().length).to.eq(models.length);
    expect(res ? store.get(res.myCustomIdField)?.value : "").eq(
      "updated-value",
    );
  });

  // the difference between PATCH and PUT is that PUT will override the entire object,
  // this it can be used to remove a field from a resource
  // when sending a partial object via PATCH we should only update the specified fields
  xit("should remove a field when using PUT", () => {
    throw new Error("Unimplemented");
  });

  xit("should update an element via PATCH", () => {
    throw new Error("Unimplemented");
  });

  it("should delete an element by ID", () => {
    const res = store.delete("id-1");
    expect(res).to.eq(true);
    expect(store.resources.length).to.eq(models.length - 1);
    expect(store.resources.find((r) => r.myCustomIdField === "id-1")).eq(
      undefined,
    );
  });

  describe("if deleting an element that does not exists", () => {
    it("should return false", () => {
      const res = store.delete("i-do-not-exist");
      expect(res).to.eq(false);
      expect(store.resources.length).to.eq(models.length);
    });
  });
});
